/*
 * Copyright 2025 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gradle.buildinit.plugins.internal

import org.gradle.api.file.Directory
import org.gradle.api.file.RegularFile
import org.gradle.internal.buildconfiguration.DaemonJvmPropertiesDefaults
import org.gradle.internal.util.PropertiesUtils
import org.gradle.test.fixtures.file.TestFile
import org.gradle.test.fixtures.file.TestNameTestDirectoryProvider
import org.junit.Rule
import spock.lang.Specification

import static org.gradle.buildinit.tasks.InitBuild.DEFAULT_JAVA_VERSION
import static org.gradle.internal.buildconfiguration.DaemonJvmPropertiesUtils.getToolchainUrlPropertyForPlatform

class DaemonJvmCriteriaGeneratorTest extends Specification {

    @Rule
    TestNameTestDirectoryProvider tmpDir = new TestNameTestDirectoryProvider(getClass())

    InitSettings settings = Mock()
    TestFile propertiesFile = tmpDir.file("gradle/gradle-daemon-jvm.properties")

    def setup() {
        Directory target = Mock()
        RegularFile propertiesRegularFile = Mock()
        settings.target >> target
        target.file('gradle/gradle-daemon-jvm.properties') >> propertiesRegularFile
        propertiesRegularFile.asFile >> propertiesFile
    }

    def "generates gradle-daemon-jvm.properties file if incubating"() {
        setup:
        def generator = new DaemonJvmCriteriaGenerator()
        settings.isUseIncubatingAPIs() >> true

        when:
        generator.generate(settings, null)

        then:
        assertDaemonJvmPropertiesFile()
    }

    def "generates gradle-daemon-jvm.properties file if not incubating"() {
        setup:
        def generator = new DaemonJvmCriteriaGenerator()
        settings.isUseIncubatingAPIs() >> true

        when:
        generator.generate(settings, null)

        then:
        assertDaemonJvmPropertiesFile()
    }

    void assertDaemonJvmPropertiesFile() {
        def expectedPropertiesFile = tmpDir.file("expected-gradle-daemon-jvm.properties")
        def expectedProperties = new Properties()
        DaemonJvmCriteriaGenerator.TOOLCHAIN_DEFAULT_DOWNLOAD_URLS.forEach( ( buildPlatform, uri) -> {
            String toolchainUrlProperty = getToolchainUrlPropertyForPlatform(buildPlatform)
            expectedProperties.put(toolchainUrlProperty, uri.toASCIIString())
        })
        expectedProperties.put(DaemonJvmPropertiesDefaults.TOOLCHAIN_VERSION_PROPERTY, Integer.toString(DEFAULT_JAVA_VERSION))
        PropertiesUtils.store(expectedProperties, expectedPropertiesFile, "This file is generated by updateDaemonJvm")

        propertiesFile.assertIsFile()
        assert propertiesFile.text == expectedPropertiesFile.text
    }
}
