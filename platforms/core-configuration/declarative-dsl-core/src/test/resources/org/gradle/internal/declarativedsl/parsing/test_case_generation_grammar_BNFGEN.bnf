<start> ::= <statement>{100};

<statement> ::= 10 <assignment> "\n" | 3 <block> "\n" | <functionChain> "\n";
<statementIndent1> ::= 5 "  " <assignment> "\n" | 3 "  " <blockIndent1> "\n" | "  " <functionChain> "\n";
<statementIndent2> ::= 3 "    " <assignment> "\n" | "    " <functionChain> "\n";

<assignment> ::= <directlyAssignableExpression> "=" <assignmentValue>;
<directlyAssignableExpression> ::= <simpleIdentifier> | <simpleIdentifier> <navigationSuffix>;
<assignmentValue> ::= 10 <literalOrIdentifier> | 5 <simpleIdentifier> | 3 <simpleIdentifier> <navigationSuffix> {1,3} <valueArguments>;

<block> ::= <simpleIdentifier> <annotatedLambda> | <simpleIdentifier> <valueArguments> <annotatedLambda>;
<blockIndent1> ::= <simpleIdentifier> <annotatedLambdaIndent1> | <simpleIdentifier> <valueArguments> <annotatedLambdaIndent1>;
<annotatedLambda> ::= " {}\n" | 10 " {\n" <statementIndent1>{1,10} "}\n";
<annotatedLambdaIndent1> ::= " {}\n" | 10 " {\n" <statementIndent2>{1,10} "  }\n";


<functionChain> ::= <simpleIdentifier> <postfixUnarySuffixes>;
<postfixUnarySuffixes> ::= <navigationSuffix> {1,3} <valueArguments> | <valueArguments> | <valueArguments> <navSuffixAndValueArguments> {1,3};
<navSuffixAndValueArguments> ::= <navigationSuffix> <valueArguments>;


<valueArguments> ::= "(" <valueArgument> ")" | "(" <valueArgument> <furtherArguments>{1,2}  ")";
<furtherArguments> ::= "," <valueArgument>;
<valueArgument> ::= 5 <functionChain> | 20 <literalOrIdentifier> | 3 <simpleIdentifier> "=" <functionChain> | 10 <simpleIdentifier> "=" <literalOrIdentifier>;

<navigationSuffix> ::= "." <simpleIdentifier>;

<literalOrIdentifier> ::= <simpleIdentifier> | <literalConstant> | <stringLiteral>;

<simpleIdentifier> ::= <letter> | <letter> <letterOrSeparatorOrUnicodeDigit>{2,3} | "_" <letterOrSeparatorOrUnicodeDigit>{1, 3};

<letterOrSeparatorOrUnicodeDigit> ::= <letter> | "_" | <unicodeDigit>;
<unicodeDigit> ::= "\\u0030" | "\\u0031" | "\\u0032" | "\\u0033" | "\\u0034" | "\\u0035" | "\\u0036" | "\\u0037" | "\\u0038" | "\\u0039" |
                   	"\\u0660" | "\\u0661" | "\\u0662" | "\\u0663" | "\\u0664" | "\\u0665" | "\\u0666" | "\\u0667" | "\\u0668" | "\\u0669" |
                   	"\\u06F0" | "\\u06F1" | "\\u06F2" | "\\u06F3" | "\\u06F4" | "\\u06F5" | "\\u06F6" | "\\u06F7" | "\\u06F8" | "\\u06F9" |
                   	"\\u07C0" | "\\u07C1" | "\\u07C2" | "\\u07C3" | "\\u07C4" | "\\u07C5" | "\\u07C6" | "\\u07C7" | "\\u07C8" | "\\u07C9" |
                   	"\\u0966" | "\\u0967" | "\\u0968" | "\\u0969" | "\\u096A" | "\\u096B" | "\\u096C" | "\\u096D" | "\\u096E" | "\\u096F" |
                   	"\\u09E6" | "\\u09E7" | "\\u09E8" | "\\u09E9" | "\\u09EA" | "\\u09EB" | "\\u09EC" | "\\u09ED" | "\\u09EE" | "\\u09EF" |
                   	"\\u0A66" | "\\u0A67" | "\\u0A68" | "\\u0A69" | "\\u0A6A" | "\\u0A6B" | "\\u0A6C" | "\\u0A6D" | "\\u0A6E" | "\\u0A6F" |
                   	"\\u0AE6" | "\\u0AE7" | "\\u0AE8" | "\\u0AE9" | "\\u0AEA" | "\\u0AEB" | "\\u0AEC" | "\\u0AED" | "\\u0AEE" | "\\u0AEF" |
                   	"\\u0B66" | "\\u0B67" | "\\u0B68" | "\\u0B69" | "\\u0B6A" | "\\u0B6B" | "\\u0B6C" | "\\u0B6D";

<stringLiteral> ::= 10 <lineStringLiteral> | <multiLineStringLiteral>;

<lineStringLiteral> ::= "\"\"" | "\"" <lineStringContent>{1,10} "\"";
<lineStringContent> ::= 30 <letter> | 3 <unicodeDigit> |
    " " | "@" | "(" | ")" | "{" | "}" | "[" | "]" | "|" | "&" | "!" | "," | ";" | "/" | "'" |
    "\\t" | "\\b" | "\\r" | "\\n" | "\\\'" | "\\\"" | "\\\\" | "\\$";

<multiLineStringLiteral> ::= "\"\"\"" <multiLineStringContent>{2,13} "\"\"\"";
<multiLineStringContent> ::= <multiLineStringContentWithQuoteWithBackslash> <multiLineStringContentNoQuoteNoBackslash>;
<multiLineStringContentWithQuoteWithBackslash> ::= <multiLineStringContentElements> | "\n" | "\t" | "\\" | "\"" | "$" <decDigit>;
<multiLineStringContentNoQuoteNoBackslash> ::= <multiLineStringContentElements> | "\n" | "\t" | "$" <decDigit>;
<multiLineStringContentElements> ::= 30 <letter> | 3 <unicodeDigit> |
     " " | "@" | "(" | ")" | "{" | "}" | "[" | "]" | "|" | "&" | "!" | "," | ";" | "/" | "'";

<letter> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" |
    "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z";


<booleanLiteral> ::= "true" | "false";

<literalConstant> ::= <booleanLiteral> | <intLiteral> | <hexLiteral> | <binLiteral> | <longLiteral> | "null";

<longLiteral> ::= <intLiteral> <longSuffix> | <hexLiteral> <longSuffix> | <binLiteral> <longSuffix>;
<longSuffix> ::= "l" | "L";

<intLiteral> ::= <decDigitNoZero> <decDigitOrSeparator>{1,3} <decDigit> | <decDigitNoZero> <decDigit> | <decDigit>;
<decDigit>  ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
<decDigitNoZero>  ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
<decDigitOrSeparator> ::= 3 <decDigit> | "_";

<hexLiteral> ::= <hexPrefix> <hexDigit> <hexDigitOrSeparator>{1,3} <hexDigit> | <hexPrefix> <hexDigit> {1,2};
<hexPrefix> ::= "0x" | "0X";
<hexDigit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F";
<hexDigitOrSeparator> ::= 3 <hexDigit> | "_";

<binLiteral> ::= <binPrefix> <binDigit> <binDigitOrSeparator>{1,3} <binDigit> | <binPrefix> <binDigit> {1,2};
<binPrefix> ::= "0b" | "0B";
<binDigit> ::= "0" | "1";
<binDigitOrSeparator> ::= 3 <binDigit> | "_";


