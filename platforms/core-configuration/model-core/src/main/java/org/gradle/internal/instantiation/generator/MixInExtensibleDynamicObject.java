/*
 * Copyright 2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gradle.internal.instantiation.generator;

import org.gradle.internal.extensibility.ExtensibleDynamicObject;
import org.gradle.internal.instantiation.InstanceGenerator;
import org.gradle.internal.instantiation.InstantiatorFactory;
import org.gradle.internal.metaobject.AbstractDynamicObject;
import org.gradle.internal.metaobject.BeanDynamicObject;
import org.gradle.internal.metaobject.DynamicObject;
import org.gradle.internal.service.ServiceLookup;
import org.jspecify.annotations.Nullable;

/**
 * Used by extensible instances generated by {@link AsmBackedClassGenerator}.
 */
public class MixInExtensibleDynamicObject extends ExtensibleDynamicObject {
    // Used by generated code
    public MixInExtensibleDynamicObject(Object decoratedObject, Class<?> publicType, @Nullable DynamicObject selfProvidedDynamicObject, ServiceLookup services) {
        super(decoratedObject, wrap(decoratedObject, publicType, selfProvidedDynamicObject), instantiator(services));
    }

    private static InstanceGenerator instantiator(ServiceLookup services) {
        InstantiatorFactory instantiatorFactory = (InstantiatorFactory) services.get(InstantiatorFactory.class);
        return instantiatorFactory.decorateLenient(services);
    }

    private static AbstractDynamicObject wrap(Object delegateObject, Class<?> publicType, DynamicObject dynamicObject) {
        if (dynamicObject != null) {
            return (AbstractDynamicObject) dynamicObject;
        }
        return new BeanDynamicObject(delegateObject, publicType);
    }
}
