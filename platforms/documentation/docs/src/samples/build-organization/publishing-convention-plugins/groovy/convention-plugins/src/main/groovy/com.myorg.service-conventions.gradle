// Define conventions for service projects this organization.
// Service projects need to use the organization's Java conventions and pass some additional checks

// tag::plugins[]
plugins {
    id 'com.myorg.java-conventions'
}
// end::plugins[]

def integrationTest = sourceSets.create('integrationTest')

configurations[integrationTest.implementationConfigurationName].extendsFrom(configurations.testImplementation)
configurations[integrationTest.runtimeOnlyConfigurationName].extendsFrom(configurations.testRuntimeOnly)

def integrationTestTask = tasks.register('integrationTest', Test) {
    testClassesDirs = integrationTest.output.classesDirs
    classpath = integrationTest.runtimeClasspath

    shouldRunAfter(tasks.named('test'))
}

dependencies {
    integrationTestImplementation project
}

// The organization requires additional documentation in the README for this project
// tag::use-java-class[]
def readmeCheck = tasks.register('readmeCheck', com.example.ReadmeVerificationTask) {
    // Expect the README in the project directory
    readme = layout.projectDirectory.file("README.md")
    // README must contain a Service API header
    readmePatterns = ['^## Service API$']
}
// end::use-java-class[]

tasks.named('check') { dependsOn(integrationTestTask, readmeCheck) }

