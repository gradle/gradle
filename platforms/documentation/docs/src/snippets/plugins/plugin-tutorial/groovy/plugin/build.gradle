// tag::publish[]
// tag::plugin-init[]
// tag::plugins[]
plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    // end::plugin-init[]
    // end::plugins[]
    // Apply the Maven Publishing plugin
    id('maven-publish')
    // tag::plugins[]
    // tag::plugin-init[]
    // Apply the Groovy plugin to add support for Groovy
    id 'groovy'
}
// end::plugin-init[]
// end::plugins[]

group = 'org.example'
version = '1.0.0'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

// tag::dependencies[]
// tag::slack-api[]
dependencies {
    // end::slack-api[]
    // Use the awesome Spock testing and specification framework
    // end::publish[]
    /*
    testImplementation libs.spock.core
     */
    // tag::publish[]
    testImplementation 'org.spockframework:spock-core:2.3-groovy-4.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // tag::slack-api[]
    // Use the Java Slack Client APIs
    implementation("com.slack.api:slack-api-client:1.45.3")
}
// end::slack-api[]
// end::dependencies[]
// end::publish[]

/*
// tag::plugin-init[]

gradlePlugin {
    // Define the plugin
    plugins {
        greeting {
            id = 'org.example.greeting'
            implementationClass = 'org.example.PluginTutorialPlugin'
        }
    }
}
// end::plugin-init[]
*/

// tag::publish[]

// tag::gradle-plugin[]
gradlePlugin {
    // Define the plugin
    plugins {
        slack {
            id = 'org.example.slack'
            implementationClass = 'org.example.SlackPlugin'
        }
    }
}
// end::gradle-plugin[]
// end::publish[]

// tag::repo[]
publishing {
    repositories {
        maven {
            name = 'localRepo'
            url = layout.buildDirectory.dir('local-repo').get().asFile.toURI()
        }
    }
}
// end::repo[]

// tag::test-config[]
// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)
configurations.functionalTestRuntimeOnly.extendsFrom(configurations.testRuntimeOnly)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}
// end::test-config[]
