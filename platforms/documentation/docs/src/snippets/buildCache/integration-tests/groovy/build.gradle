plugins {
    id('java-library')
}

sourceSets {
    integTest
}

tasks.register("integTest", Test) {
    classpath = sourceSets.integTest.runtimeClasspath
    testClassesDirs = sourceSets.integTest.output.classesDirs
}

// tag::integTest[]
tasks.named('integTest') {
    inputs.property("operatingSystem") {
        System.getProperty("os.name")
    }
}
// end::integTest[]

// tag::distributionPathInput[]
// Don't do this! Breaks relocatability!
tasks.named('integTest') {
    systemProperty "distribution.location", layout.buildDirectory.dir('dist').get().asFile.absolutePath
}
// end::distributionPathInput[]

// tag::distributionDirInput[]
abstract class DistributionLocationProvider implements CommandLineArgumentProvider {  // <1>
    @InputDirectory
    @PathSensitive(PathSensitivity.RELATIVE)  // <2>
    abstract DirectoryProperty getDistribution()

    @Override
    Iterable<String> asArguments() {
        ["-Ddistribution.location=${distribution.get().asFile.absolutePath}"]  // <3>
    }
}

tasks.named('integTest') {
    jvmArgumentProviders.add(
        objects.newInstance(DistributionLocationProvider).tap {  // <4>
            distribution = layout.buildDirectory.dir('dist')
        }
    )
}
// end::distributionDirInput[]

// tag::ignoreSystemProperties[]
abstract class CiEnvironmentProvider implements CommandLineArgumentProvider {
    @Internal  // <1>
    abstract Property<String> getAgentNumber()

    @Override
    Iterable<String> asArguments() {
        ["-DagentNumber=${agentNumber.get()}"]  // <2>
    }
}

tasks.named('integTest') {
    jvmArgumentProviders.add(
        objects.newInstance(CiEnvironmentProvider).tap {  // <3>
            agentNumber = providers.environmentVariable("AGENT_NUMBER").orElse("1")
        }
    )
}
// end::ignoreSystemProperties[]

// tag::environment[]
tasks.named('integTest') {
    inputs.property("langEnvironment") {
        System.getenv("LANG")
    }
}
// end::environment[]
