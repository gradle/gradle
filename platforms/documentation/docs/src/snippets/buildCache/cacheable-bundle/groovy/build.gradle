plugins {
    id 'base'
}

// Fake NPM task that would normally execute npm with its provided arguments
abstract class NpmTask extends DefaultTask {

    @Input
    final ListProperty<String> args = project.objects.listProperty(String)

    @Inject
    abstract ProjectLayout getProjectLayout()

    @TaskAction
    void run() {
        def bundleFile = projectLayout.buildDirectory.file("bundle.js").get().asFile
        def scriptsFiles = projectLayout.projectDirectory.dir("scripts").asFile.listFiles()

        bundleFile.withOutputStream { stream ->
            scriptsFiles.sort().each {
                stream.write(it.bytes)
            }
        }
    }
}

// tag::bundle-task[]
tasks.register('bundle', NpmTask) {
    args = ['run', 'bundle']

    outputs.cacheIf { true }

    inputs.dir(file("scripts"))
        .withPropertyName("scripts")
        .withPathSensitivity(PathSensitivity.RELATIVE)

    inputs.files("package.json", "package-lock.json")
        .withPropertyName("configFiles")
        .withPathSensitivity(PathSensitivity.RELATIVE)

    outputs.file(layout.buildDirectory.file("bundle.js"))
        .withPropertyName("bundle")
}
// end::bundle-task[]

tasks.register('printBundle') {
    dependsOn bundle

    def projectLayout = layout

    doLast {
        println projectLayout.buildDirectory.file("bundle.js").get().asFile.text
    }
}
