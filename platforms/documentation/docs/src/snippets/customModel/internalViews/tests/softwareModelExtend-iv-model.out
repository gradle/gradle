
------------------------------------------------------------
Root project 'internal-view'
------------------------------------------------------------

+ components
      | Type:   	org.gradle.platform.base.ComponentSpecContainer
      | Creator: 	ComponentBasePlugin.PluginRules#components(ComponentSpecContainer)
      | Rules:
         ⤷ components { ... } @ build.gradle line 37, column 5
         ⤷ MyPlugin#mutateMyComponents(ModelMap<MyComponentInternal>)
    + my
          | Type:   	MyComponent
          | Creator: 	components { ... } @ build.gradle line 37, column 5 > create(my)
          | Rules:
             ⤷ MyPlugin#mutateMyComponents(ModelMap<MyComponentInternal>) > all()
        + publicData
              | Type:   	java.lang.String
              | Value:  	Some PUBLIC data
              | Creator: 	components { ... } @ build.gradle line 37, column 5 > create(my)
+ tasks
      | Type:   	org.gradle.model.ModelMap<org.gradle.api.Task>
      | Creator: 	Project.<init>.tasks()
    + artifactTransforms
          | Type:   	org.gradle.api.tasks.diagnostics.ArtifactTransformsReportTask
          | Value:  	task ':artifactTransforms'
          | Creator: 	Project.<init>.tasks.artifactTransforms()
          | Rules:
             ⤷ copyToTaskContainer
    + assemble
          | Type:   	org.gradle.api.DefaultTask
          | Value:  	task ':assemble'
          | Creator: 	Project.<init>.tasks.assemble()
          | Rules:
             ⤷ copyToTaskContainer
    + build
          | Type:   	org.gradle.api.DefaultTask
          | Value:  	task ':build'
          | Creator: 	Project.<init>.tasks.build()
          | Rules:
             ⤷ copyToTaskContainer
    + buildEnvironment
          | Type:   	org.gradle.api.tasks.diagnostics.BuildEnvironmentReportTask
          | Value:  	task ':buildEnvironment'
          | Creator: 	Project.<init>.tasks.buildEnvironment()
          | Rules:
             ⤷ copyToTaskContainer
    + check
          | Type:   	org.gradle.api.DefaultTask
          | Value:  	task ':check'
          | Creator: 	Project.<init>.tasks.check()
          | Rules:
             ⤷ copyToTaskContainer
    + clean
          | Type:   	org.gradle.api.tasks.Delete
          | Value:  	task ':clean'
          | Creator: 	Project.<init>.tasks.clean()
          | Rules:
             ⤷ copyToTaskContainer
    + components
          | Type:   	org.gradle.api.reporting.components.ComponentReport
          | Value:  	task ':components'
          | Creator: 	Project.<init>.tasks.components()
          | Rules:
             ⤷ copyToTaskContainer
    + dependencies
          | Type:   	org.gradle.api.tasks.diagnostics.DependencyReportTask
          | Value:  	task ':dependencies'
          | Creator: 	Project.<init>.tasks.dependencies()
          | Rules:
             ⤷ copyToTaskContainer
    + dependencyInsight
          | Type:   	org.gradle.api.tasks.diagnostics.DependencyInsightReportTask
          | Value:  	task ':dependencyInsight'
          | Creator: 	Project.<init>.tasks.dependencyInsight()
          | Rules:
             ⤷ copyToTaskContainer
    + dependentComponents
          | Type:   	org.gradle.api.reporting.dependents.DependentComponentsReport
          | Value:  	task ':dependentComponents'
          | Creator: 	Project.<init>.tasks.dependentComponents()
          | Rules:
             ⤷ copyToTaskContainer
    + help
          | Type:   	org.gradle.configuration.Help
          | Value:  	task ':help'
          | Creator: 	Project.<init>.tasks.help()
          | Rules:
             ⤷ copyToTaskContainer
    + init
          | Type:   	org.gradle.buildinit.tasks.InitBuild
          | Value:  	task ':init'
          | Creator: 	Project.<init>.tasks.init()
          | Rules:
             ⤷ copyToTaskContainer
    + javaToolchains
          | Type:   	org.gradle.jvm.toolchain.internal.task.ShowToolchainsTask
          | Value:  	task ':javaToolchains'
          | Creator: 	Project.<init>.tasks.javaToolchains()
          | Rules:
             ⤷ copyToTaskContainer
    + model
          | Type:   	org.gradle.api.reporting.model.ModelReport
          | Value:  	task ':model'
          | Creator: 	Project.<init>.tasks.model()
          | Rules:
             ⤷ copyToTaskContainer
    + outgoingVariants
          | Type:   	org.gradle.api.tasks.diagnostics.OutgoingVariantsReportTask
          | Value:  	task ':outgoingVariants'
          | Creator: 	Project.<init>.tasks.outgoingVariants()
          | Rules:
             ⤷ copyToTaskContainer
    + prepareKotlinBuildScriptModel
          | Type:   	org.gradle.api.DefaultTask
          | Value:  	task ':prepareKotlinBuildScriptModel'
          | Creator: 	Project.<init>.tasks.prepareKotlinBuildScriptModel()
          | Rules:
             ⤷ copyToTaskContainer
    + projects
          | Type:   	org.gradle.api.tasks.diagnostics.ProjectReportTask
          | Value:  	task ':projects'
          | Creator: 	Project.<init>.tasks.projects()
          | Rules:
             ⤷ copyToTaskContainer
    + properties
          | Type:   	org.gradle.api.tasks.diagnostics.PropertyReportTask
          | Value:  	task ':properties'
          | Creator: 	Project.<init>.tasks.properties()
          | Rules:
             ⤷ copyToTaskContainer
    + resolvableConfigurations
          | Type:   	org.gradle.api.tasks.diagnostics.ResolvableConfigurationsReportTask
          | Value:  	task ':resolvableConfigurations'
          | Creator: 	Project.<init>.tasks.resolvableConfigurations()
          | Rules:
             ⤷ copyToTaskContainer
    + tasks
          | Type:   	org.gradle.api.tasks.diagnostics.TaskReportTask
          | Value:  	task ':tasks'
          | Creator: 	Project.<init>.tasks.tasks()
          | Rules:
             ⤷ copyToTaskContainer
    + updateDaemonJvm
          | Type:   	org.gradle.buildconfiguration.tasks.UpdateDaemonJvm
          | Value:  	task ':updateDaemonJvm'
          | Creator: 	Project.<init>.tasks.updateDaemonJvm()
          | Rules:
             ⤷ copyToTaskContainer
    + wrapper
          | Type:   	org.gradle.api.tasks.wrapper.Wrapper
          | Value:  	task ':wrapper'
          | Creator: 	Project.<init>.tasks.wrapper()
          | Rules:
             ⤷ copyToTaskContainer
