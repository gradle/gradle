plugins {
    id 'java-library'
}

// tag::bad-classpath-printer[]
dependencies {
    runtimeOnly project(":library") // <1>
}

abstract class BadClasspathPrinter extends DefaultTask {
    @InputFiles
    Set<File> classpath = [] as Set // <2>

    protected int calculateDigest(File fileOrDirectory) {
        if (!fileOrDirectory.exists()) {
            throw new IllegalArgumentException("File or directory $fileOrDirectory doesn't exist")
        }
        return 0 // actual implementation is stripped
    }

    @TaskAction
    void run() {
        logger.lifecycle(
            classpath.collect { file ->
                def digest = calculateDigest(file) // <4>
                "$file#$digest"
            }.join("\n")
        )
    }
}

tasks.register("badClasspathPrinter", BadClasspathPrinter) {
    classpath = configurations.runtimeClasspath.resolve() // <3>
}
// end::bad-classpath-printer[]

// tag::good-classpath-printer[]
dependencies {
    runtimeOnly project(":library") // <1>
}

abstract class GoodClasspathPrinter extends DefaultTask {

    @InputFiles
    abstract ConfigurableFileCollection getResolvedClasspath() // <2>

    protected int calculateDigest(File fileOrDirectory) {
        if (!fileOrDirectory.exists()) {
            throw new IllegalArgumentException("File or directory $fileOrDirectory doesn't exist")
        }
        return 0 // actual implementation is stripped
    }

    @TaskAction
    void run() {
        logger.lifecycle(
            resolvedClasspath.collect { file ->
                def digest = calculateDigest(file) // <4>
                "$file#$digest"
            }.join("\n")
        )
    }
}

tasks.register("goodClasspathPrinter", GoodClasspathPrinter) {
    resolvedClasspath.from(configurations.runtimeClasspath) // <3>
}
// end::good-classpath-printer[]