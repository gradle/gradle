plugins {
    id 'java'
}

// tag::groovyJdk[]
// Iterable gets an each() method
configurations.runtimeClasspath.each { File f -> println f }
// end::groovyJdk[]

// tag::propertyAccessors[]
// Using a getter method
println project.buildDir
println getProject().getBuildDir()

// Using a setter method
project.buildDir = 'target'
getProject().setBuildDir('target')
// end::propertyAccessors[]

// tag::methodCallWithoutParentheses[]
test.systemProperty 'some.prop', 'value'
test.systemProperty('some.prop', 'value')
// end::methodCallWithoutParentheses[]

// tag::listAndMapLiterals[]
// List literal
test.includes = ['org/gradle/api/**', 'org/gradle/internal/**']

List<String> list = new ArrayList<String>()
list.add('org/gradle/api/**')
list.add('org/gradle/internal/**')
test.includes = list

// Map literal.
Map<String, String> map = [key1:'value1', key2: 'value2']

// Groovy will coerce named arguments
// into a single map argument
apply plugin: 'java'
// end::listAndMapLiterals[]

// tag::closureAsLastParam[]
repositories {
    println "in a closure"
}
repositories() { println "in a closure" }
repositories({ println "in a closure" })
// end::closureAsLastParam[]

// tag::closureDelegates[]
dependencies {
    assert delegate == project.dependencies
    testImplementation('junit:junit:4.13')
    delegate.testImplementation('junit:junit:4.13')
}
// end::closureDelegates[]
