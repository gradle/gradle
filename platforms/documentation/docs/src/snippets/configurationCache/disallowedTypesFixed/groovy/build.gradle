plugins {
    id 'java'
}

// tag::task-type[]
abstract class SomeTask extends DefaultTask {

    @InputFiles @Classpath
    abstract ConfigurableFileCollection getClasspath() // <1>

    @TaskAction
    void action() {
        def classpathFiles = classpath.files
        // ...
    }
}
// end::task-type[]

tasks.register("someTaskType", SomeTask) {
    classpath.from(sourceSets.main.compileClasspath)
}

// tag::ad-hoc-task[]
tasks.register('someTask') {
    def classpath = sourceSets.main.compileClasspath // <1>
    doLast {
        def classpathFiles = classpath.files
    }
}
// end::ad-hoc-task[]
