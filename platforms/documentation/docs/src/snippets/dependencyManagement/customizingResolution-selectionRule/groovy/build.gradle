plugins {
    id('java')
}

repositories {
    ivy {
        url = layout.projectDirectory.dir("repo")
    }
}

// Set up the status scheme so that "experimental" is a valid status for "org.sample" artifacts

class StatusRule implements ComponentMetadataRule {

    @Override
    void execute(ComponentMetadataContext componentMetadataContext) {
        def details = componentMetadataContext.details
        if (details.id.group == "org.sample") {
            details.statusScheme = ["experimental", "integration", "milestone", "release"]
        }
    }
}
dependencies {
    components {
        all(StatusRule)
    }
}

// tag::reject-version-1-1[]
configurations {
    implementation {
        resolutionStrategy {
            componentSelection {
                // Accept the highest version matching the requested version that isn't '1.5'
                all { ComponentSelection selection ->
                    if (selection.candidate.group == 'org.sample' && selection.candidate.module == 'api' && selection.candidate.version == '1.5') {
                        selection.reject("version 1.5 is broken for 'org.sample:api'")
                    }
                }
            }
        }
    }
}

dependencies {
    implementation 'org.sample:api:1.+'
}
// end::reject-version-1-1[]

tasks.register('printRejectConfig') {
    FileCollection implConfig = configurations.runtimeClasspath
    doLast {
        implConfig.each { println "Resolved: ${it.name}" }
    }
}

// tag::component-selection-with-metadata[]
configurations {
    metadataRulesConfig {
        resolutionStrategy {
            componentSelection {
                // Reject any versions with a status of 'experimental'
                all { ComponentSelection selection ->
                    if (selection.candidate.group == 'org.sample' && selection.metadata?.status == 'experimental') {
                        selection.reject("don't use experimental candidates from 'org.sample'")
                    }
                }
                // Accept the highest version with either a "release" branch or a status of 'milestone'
                withModule('org.sample:api') { ComponentSelection selection ->
                    if (selection.getDescriptor(IvyModuleDescriptor)?.branch != "release" && selection.metadata?.status != 'milestone') {
                        selection.reject("'org.sample:api' must be a release branch or have milestone status")
                    }
                }
            }
        }
    }
}
// end::component-selection-with-metadata[]

dependencies {
    metadataRulesConfig "org.sample:api:1.+"
    metadataRulesConfig "org.sample:lib:+"
}

tasks.register('printMetadataRulesConfig') {
    FileCollection metadataRulesConfig = configurations.metadataRulesConfig
    doLast {
        metadataRulesConfig.each { println "Resolved: ${it.name}" }
    }
}

// tag::targeted-component-selection[]
configurations {
    targetConfig {
        resolutionStrategy {
            componentSelection {
                withModule("org.sample:api") { ComponentSelection selection ->
                    if (selection.candidate.version == "1.5") {
                        selection.reject("version 1.5 is broken for 'org.sample:api'")
                    }
                }
            }
        }
    }
}
// end::targeted-component-selection[]

dependencies {
    targetConfig "org.sample:api:1.+"
}

tasks.register('printTargetConfig') {
    FileCollection targetConfig = configurations.targetConfig
    doLast {
        targetConfig.each { println "Resolved: ${it.name}" }
    }
}

configurations {
    sampleConfig {
        resolutionStrategy {
            componentSelection {
                withModule("org.sample:api") { ComponentSelection selection ->
                    // Veto everything except patch releases
                    if (selection.candidate.version.matches('\\d+.\\d+\\.\\d+')) {
                        logger.lifecycle("** Accepted version: ${selection.candidate.version} **")
                    } else {
                        logger.lifecycle("Rejected version: ${selection.candidate.version}")
                        selection.reject("Version is broken")
                    }
                }
            }
        }
    }
}

dependencies {
    sampleConfig group: 'org.sample', name: 'api', version: '1+'
}

tasks.register('resolveConfiguration') {
    FileCollection sampleConfig = configurations.sampleConfig
    doLast {
        sampleConfig.each { println it }
    }
}
