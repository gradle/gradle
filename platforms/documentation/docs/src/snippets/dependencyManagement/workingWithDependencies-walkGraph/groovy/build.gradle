repositories {
    mavenCentral()
}

configurations {
    scm
}

dependencies {
    scm 'org.eclipse.jgit:org.eclipse.jgit:4.9.2.201712150930-r'
    scm 'commons-codec:commons-codec:1.7'
    scm 'some:unresolved:2.5'
}

// tag::walk-task[]
tasks.register('walkDependencyGraph', DependencyGraphWalk) {
    dependencies = configurations.scm.incoming
}

abstract class DependencyGraphWalk extends DefaultTask {

    @Input
    abstract Property<ResolvableDependencies> getDependencies()

    @TaskAction
    void walk() {
        ResolutionResult resolutionResult = dependencies.get().resolutionResult
        ResolvedComponentResult root = resolutionResult.root
        traverseDependencies(0, root.dependencies)
    }

    private void traverseDependencies(int level, Set<? extends DependencyResult> results) {
        for (DependencyResult result : results) {
            if (result instanceof ResolvedDependencyResult) {
                ResolvedComponentResult componentResult = result.selected
                ComponentIdentifier componentIdentifier = componentResult.id
                String node = calculateIndentation(level) + "- $componentIdentifier.displayName ($componentResult.selectionReason)"
                logger.quiet node
                traverseDependencies(level + 1, componentResult.dependencies)
            } else if (result instanceof UnresolvedDependencyResult) {
                ComponentSelector componentSelector = result.attempted
                String node = calculateIndentation(level) + "- $componentSelector.displayName (failed)"
                logger.quiet node
            }
        }
    }

    private String calculateIndentation(int level) {
        '     ' * level
    }
}
// end::walk-task[]
