plugins {
    id 'application'
}

repositories {
    mavenCentral()
}

// Declare the dependency on the producer project
dependencies {
    implementation project(':producer')
}

tasks.register('checkResolvedVariant') {
    println "RuntimeClasspath Configuration:"
    def resolvedArtifacts = configurations.runtimeClasspath.incoming.artifacts.resolvedArtifacts
    resolvedArtifacts.get().each { artifact ->
        println "- Artifact: ${artifact.file}"
    }
    def resolvedComponents = configurations.runtimeClasspath.incoming.resolutionResult.allComponents
    resolvedComponents.each { component ->
        if (component.id.displayName == 'project :producer') {
            println "- Component: ${component.id}"
            component.variants.each { variant ->
                println "    - Variant: ${variant}"
                variant.attributes.keySet().each { key ->
                    println "       - ${key.name} -> ${variant.attributes.getAttribute(key)}"
                }
            }
        }
    }
}

tasks.register('artifactWithAttributeAndView') {
    def configuration = configurations.runtimeClasspath
    println "Attributes used to resolve '${configuration.name}':"
    configuration.attributes.keySet().each { attribute ->
        def value = configuration.attributes.getAttribute(attribute)
        println "  - ${attribute.name} = ${value}"
    }

    println "\nAttributes in ArtifactView for 'LibraryElements = classes:'"
    def artifactView = configuration.incoming.artifactView {
        attributes {
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, 'classes'))
        }
    }

    artifactView.artifacts.artifactFiles.files.each { file ->
        println "- Artifact: ${file.name}"
    }

    artifactView.attributes.keySet().each { attribute ->
        def value = artifactView.attributes.getAttribute(attribute)
        println "  - ${attribute.name} = ${value}"
    }
}

tasks.register('artifactWithAttributeAndVariantReselectionView') {
    def configuration = configurations.runtimeClasspath
    println "Attributes used to resolve '${configuration.name}':"
    configuration.attributes.keySet().each { attribute ->
        def value = configuration.attributes.getAttribute(attribute)
        println "  - ${attribute.name} = ${value}"
    }

    println "\nAttributes in ArtifactView for 'Category = production:'"
    def artifactView = configuration.incoming.artifactView {
        withVariantReselection()
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category,'production'))
        }
    }

    artifactView.artifacts.artifactFiles.files.each { file ->
        println "- Artifact: ${file.name}"
    }

    artifactView.attributes.keySet().each { attribute ->
        def value = artifactView.attributes.getAttribute(attribute)
        println "  - ${attribute.name} = ${value}"
    }
}
