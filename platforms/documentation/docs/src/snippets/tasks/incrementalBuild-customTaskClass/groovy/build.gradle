import org.example.*

plugins {
    id 'base'
}

def processTemplates = tasks.register('processTemplates', ProcessTemplates) {
    templateEngine = TemplateEngineType.FREEMARKER
    sourceFiles.from fileTree('src/templates')
    templateData.name = 'test'
    templateData.variables = [year: '2012']
    outputDir = file(layout.buildDirectory.dir('genOutput'))
}

interface Injected {
    @Inject FileSystemOperations getFs()
}

// tag::ad-hoc-task[]
tasks.register('processTemplatesAdHoc') {
    inputs.property('engine', TemplateEngineType.FREEMARKER)
    inputs.files(fileTree('src/templates'))
        .withPropertyName('sourceFiles')
        .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.property('templateData.name', 'docs')
    inputs.property('templateData.variables', [year: '2013'])
    outputs.dir(layout.buildDirectory.dir('genOutput2'))
        .withPropertyName('outputDir')

// end::ad-hoc-task[]
    def buildDirectory = layout.buildDirectory
    def objectFactory = project.objects
    def injected = objectFactory.newInstance(Injected)

// tag::ad-hoc-task[]
    doLast {
        // Process the templates here
// end::ad-hoc-task[]
        injected.fs.copy {
            into buildDirectory.dir('genOutput2')
            from objectFactory.fileTree().from('src/templates')
            expand([year: '2013'])
        }

// tag::ad-hoc-task[]
    }
}
// end::ad-hoc-task[]

// tag::ad-hoc-task-skip-when-empty[]
tasks.register('processTemplatesAdHocSkipWhenEmpty') {
    // ...

    inputs.files(fileTree('src/templates') {
            include '**/*.fm'
        })
        .skipWhenEmpty()
        .withPropertyName('sourceFiles')
        .withPathSensitivity(PathSensitivity.RELATIVE)
        .ignoreEmptyDirectories()

    // ...
// end::ad-hoc-task-skip-when-empty[]
    inputs.property('engine', TemplateEngineType.FREEMARKER)
    inputs.property('templateData.name', 'docs')
    inputs.property('templateData.variables', [year: '2013'])
    outputs.dir(layout.buildDirectory.dir('genOutput2'))
        .withPropertyName('outputDir')

    def buildDirectory = layout.buildDirectory
    def objectFactory = project.objects
    def injected = objectFactory.newInstance(Injected)

    doLast {
        injected.fs.copy {
            into buildDirectory.dir('genOutput2')
            from objectFactory.fileTree().from('src/templates')
            expand([year: '2013'])
        }
    }
// tag::ad-hoc-task-skip-when-empty[]
}
// end::ad-hoc-task-skip-when-empty[]

// tag::custom-class-runtime-api[]
tasks.register('processTemplatesWithExtraInputs', ProcessTemplates) {
    // ...
// end::custom-class-runtime-api[]
    templateEngine = TemplateEngineType.FREEMARKER
    sourceFiles.from fileTree('src/templates')
    templateData.name = 'test'
    templateData.variables = [year: '2014']
    outputDir = file(layout.buildDirectory.dir('genOutput3'))
// tag::custom-class-runtime-api[]

    inputs.file('src/headers/headers.txt')
        .withPropertyName('headers')
        .withPathSensitivity(PathSensitivity.NONE)
}
// end::custom-class-runtime-api[]

// tag::inferred-task-dep-via-outputs[]
tasks.register('packageFiles', Zip) {
    from processTemplates.map { it.outputDir }
}
// end::inferred-task-dep-via-outputs[]

// tag::inferred-task-dep-via-task[]
tasks.register('packageFiles2', Zip) {
    from processTemplates
}
// end::inferred-task-dep-via-task[]


// tag::adhoc-destroyable-task[]
tasks.register('removeTempDir') {
    def tempDir = layout.projectDirectory.dir('tmpDir')
    destroyables.register(tempDir)
    doLast {
        tempDir.asFile.deleteDir()
    }
}
// end::adhoc-destroyable-task[]

tasks.named('build') {
    dependsOn processTemplates, 'processTemplatesAdHoc', 'processTemplatesAdHocSkipWhenEmpty', 'processTemplatesWithExtraInputs'
}
