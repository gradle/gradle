// tag::convention-callsites[]

// tag::convention-callsites-from-plugin[]
// setting convention when registering a task from plugin
class GreetingPlugin implements Plugin<Project> {
    void apply(Project project) {
        project.getTasks().register("hello", GreetingTask) {
            greeter.convention("Greeter")
        }
    }
}
// end::convention-callsites-from-plugin[]

apply plugin: GreetingPlugin

// tag::convention-callsites-from-buildscript[]
tasks.withType(GreetingTask).configureEach {
    // setting convention from build script
    guest.convention("Guest")
}
// end::convention-callsites-from-buildscript[]

abstract class GreetingTask extends DefaultTask {
    // tag::convention-callsites-from-constructor[]
    // setting convention from constructor
    @Input
    abstract Property<String> getGuest()

    GreetingTask() {
        guest.convention("person2")
    }
    // end::convention-callsites-from-constructor[]

    // tag::convention-callsites-from-declaration[]
    // setting convention from declaration
    @Input
    final Property<String> greeter = project.objects.property(String).convention("person1")
    // end::convention-callsites-from-declaration[]

    @TaskAction
    void greet() {
        println("hello, ${guest.get()}, from ${greeter.get()}")
    }
}

// end::convention-callsites[]



