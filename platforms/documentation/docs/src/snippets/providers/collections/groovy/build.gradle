// tag::dos[]
abstract class MyPluginExtensionDomainObjectSet {
    // Define a domain object set to hold strings
    abstract DomainObjectSet<String> getMyStrings()

    void myStrings(Action<? super DomainObjectSet<String>> action) {
        action.execute(getMyStrings())
    }
}

extensions.create("dos", MyPluginExtensionDomainObjectSet)

dos {
    myStrings {
        add("hello")
    }
}

// end::dos[]

assert dos.myStrings.size() == 1

// tag::ndos[]
// tag::ndol[]
// tag::ndoc[]
interface Person extends Named {
    
}
// end::ndol[]
// end::ndoc[]

abstract class MyPluginExtensionNamedDomainObjectSet {
    // Define a named domain object set to hold Person objects
    abstract NamedDomainObjectSet<Person> getPeople()

    void people(Action<? super NamedDomainObjectSet<Person>> action) {
        action.execute(getPeople())
    }
}
extensions.create("ndos", MyPluginExtensionNamedDomainObjectSet)

ndos {
    people {
       add(objects.newInstance(Person, "bobby"))
    }
}
// end::ndos[]

assert ndos.people.size() == 1

// tag::ndol[]

abstract class MyPluginExtensionNamedDomainObjectList {
    // Define a named domain object container to hold Person objects
    abstract NamedDomainObjectList<Person> getPeople()

    void people(Action<? super NamedDomainObjectList<Person>> action) {
        action.execute(getPeople())
    }
}

extensions.create("ndol", MyPluginExtensionNamedDomainObjectList)

ndol {
    people {
        add(objects.newInstance(Person, "bobby"))
        add(objects.newInstance(Person, "hank"))
    }
}

// end::ndol[]

assert ndol.people.size() == 2

// tag::ndoc[]

abstract class MyPluginExtensionNamedDomainObjectContainer {
    // Define a named domain object container to hold Person objects
    abstract NamedDomainObjectContainer<Person> getPeople()

    void people(Action<? super NamedDomainObjectContainer<Person>> action) {
        action.execute(getPeople())
    }
}

extensions.create("ndoc", MyPluginExtensionNamedDomainObjectContainer)

ndoc {
    people {
        bobby
        hank
        peggy
    }
}
// end::ndoc[]

assert ndoc.people.size() == 3

// tag::epdoc[]
interface Animal extends Named {

}

interface Dog extends Animal {
    Property<String> getBreed()
}

abstract class MyPluginExtensionExtensiblePolymorphicDomainObjectContainer {
    // Define a container for animals
    abstract ExtensiblePolymorphicDomainObjectContainer<Animal> getAnimals()

    void animals(Action<? super ExtensiblePolymorphicDomainObjectContainer<Animal>> action) {
        action.execute(getAnimals())
    }
}


extensions.create("epdoc", MyPluginExtensionExtensiblePolymorphicDomainObjectContainer)

// Register available types for container
epdoc.animals.registerBinding(Dog, Dog)

epdoc {
    animals {
        bubba(Dog) {
            breed = "basset hound"
        }
    }
}

// end::epdoc[]

assert epdoc.animals.size() == 1