/*
 * Copyright 2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

ext.pluginCount = 25
ext.pluginNestLevel = 3

ext.groupedPluginIds = (1..pluginCount).groupBy { (int) (it / pluginNestLevel) }.values()

tasks.register('generatePluginSources') {
    inputs.property('pluginCount', pluginCount)
    def genDir = file("build/src/generated/java")
    outputs.dir genDir

    doLast {
        def packageDir = new File(genDir, "org/gradle/build/generated/")
        packageDir.mkdirs()

        (1..pluginCount).each { i ->
            new File(packageDir, "GeneratedPlugin${i}.java").text = """
            package org.gradle.build.generated;

            import org.gradle.api.Project;
            import org.gradle.api.Plugin;
            
            public class GeneratedPlugin${i} implements Plugin<Project> {
                boolean reducedOutput = Boolean.getBoolean("reducedOutput");
                public void apply(Project project) {
                    ${maybeApplyNestedPluginCode(i)}
                    if (!reducedOutput) {
                        System.out.println("plugin GeneratedPlugin${i} applied to " + project.getPath());
                    }
                }
            }
            """
        }
    }
}

String maybeApplyNestedPluginCode(int parentPluginId) {
    def pluginGroup = groupedPluginIds.find { it.contains(parentPluginId) }
    def nestedPluginId = pluginGroup.find { it > parentPluginId }
    return nestedPluginId ? 'project.getPluginManager().apply(GeneratedPlugin' + nestedPluginId + '.class);' : ''
}

tasks.register('generatePluginResources') {
    inputs.property('pluginCount', pluginCount)
    def genDir = file("build/src/generated/resources/META-INF/gradle-plugins")
    outputs.dir genDir

    doLast {
        (1..pluginCount).each { i ->
            new File(genDir, "org.gradle.build.gen${i}.properties").text = "implementation-class=org.gradle.build.generated.GeneratedPlugin${i}"
        }
    }
}

sourceSets.main.java.srcDir 'build/src/generated/java'
sourceSets.main.resources.srcDir 'build/src/generated/resources'

tasks.named('compileJava').configure {
    dependsOn 'generatePluginSources'
}

tasks.named('processResources').configure {
    dependsOn 'generatePluginResources'
}
