apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'


<% if (binding.hasVariable("manyPlugins")) { (1..25).findAll { it % 3 == 0 }.each { %>
    apply plugin: "org.gradle.build.gen${it}"
    <% } %>
    <% } %>


<% if (binding.hasVariable("manyScripts")) { (1..30).findAll { it % 5 == 0 }.each { %>
    apply from: "\${rootProject.projectDir.absolutePath}/gradle/script-plugin${it}.gradle"
    <% } %>
    <% } %>

repositories {
<% if (repository) { %>
    maven {
        url = rootProject.file("${repository.rootDir.name}")
    }
<% } %>
    mavenCentral()
}

<% if (binding.hasVariable("projectDependencies")) { %>
    configurations {
        implementation.extendsFrom projectsConfiguration
    }
<% } %>


<% if (binding.hasVariable("springDmPluginVersion")) {%>
apply plugin: "io.spring.dependency-management"
dependencyManagement {
    imports {
        mavenBom 'org.springframework.boot:spring-boot-dependencies:1.3.5.RELEASE'
        mavenBom 'io.spring.platform:platform-bom:2.0.5.RELEASE'
    }
}
<% } %>

if(Boolean.getBoolean("slowTasks")) {
    allprojects {
        tasks.withType(JavaCompile) {
            doLast {
                Thread.sleep(100)
            }
        }
    }
}

dependencies {
    implementation 'commons-lang:commons-lang:2.5'
    implementation "commons-httpclient:commons-httpclient:3.0"
    implementation "commons-codec:commons-codec:1.2"
    implementation "org.slf4j:jcl-over-slf4j:1.7.10"
    implementation "org.codehaus.groovy:groovy:2.4.10"
    testImplementation 'junit:junit:4.13'
    runtimeOnly 'com.googlecode:reflectasm:1.01'

    <% if (dependencies) { dependencies.each { %>
        implementation "${it.shortNotation()}" <% } %>
    <% } %>
    <% if (binding.hasVariable("projectDependencies") && subprojectNumber > 1) { (1..<subprojectNumber).each { %>
        projectsConfiguration project(":project${it}") <% } %>
    <% } %>
}

test {
    jvmArgs('-Xmx1g', '-XX:+HeapDumpOnOutOfMemoryError')
    <% if (binding.hasVariable("fullTestLogging")) { %>
        testLogging {
            if (Boolean.getBoolean("reducedOutput")) {
                events "failed"
            } else {
                events "started", "skipped", "failed", "passed", "standard_out", "standard_error"
            }
        }
    <% } %>
    maxParallelForks = 2
}
