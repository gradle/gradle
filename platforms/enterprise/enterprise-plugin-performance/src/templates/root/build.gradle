/*
 * Copyright 2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import org.gradle.api.flow.BuildWorkResult
import org.gradle.api.flow.FlowAction
import org.gradle.api.flow.FlowParameters
import org.gradle.api.flow.FlowProviders
import org.gradle.api.flow.FlowScope

// We want to double check that a build failure is
// only caused by failing test executions
abstract class CheckResult implements FlowAction<Parameters> {
    interface Parameters extends FlowParameters {
        @Input
        Property<BuildWorkResult> getBuildResult()
        @Input
        Property<File> getBuildDirectory()
    }

    @Override
    void execute(Parameters parameters) throws Exception {
        BuildWorkResult result = parameters.getBuildResult().get()
        if(result.failure.isPresent()) {
            File buildDir = parameters.getBuildDirectory().get()
            buildDir.mkdirs()
            def failure = result.failure.get()
            def unexpectedFailure = (failure instanceof org.gradle.execution.MultipleBuildFailures && failure.causes.every { cause ->
                def failureMessage = cause?.cause?.cause?.message
                !failureMessage?.contains("There were failing tests")
            })
            if(unexpectedFailure) {
                StringWriter errors = new StringWriter();
                failure.printStackTrace(new PrintWriter(errors));
                new File(buildDir, "error.log").text = errors.toString()
            }
        }
    }
}

FlowProviders flowProviders = gradle.services.get(FlowProviders)
FlowScope flowScope = gradle.services.get(FlowScope)

flowScope.always(CheckResult) {
    parameters {
        buildResult = flowProviders.buildWorkResult
        buildDirectory = project.layout.buildDirectory.asFile
    }
}
