plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'jacoco'
}

android {
    compileSdk = 24
    buildToolsVersion = '$androidBuildToolsVersion'
    namespace = "org.gradle.smoketest.kotlin.android"
    defaultConfig {
        applicationId = "org.gradle.smoketest.kotlin.android"
        minSdk = 16
        targetSdk = 24
        versionCode = 1
        versionName = "1.0"
        testInstrumentationRunner = "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled = false
            proguardFiles(getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro')
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')
    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"
            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "${testTaskName}Coverage" (type:JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."
                classDirectories.from(fileTree(
                    dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                    excludes: [
                        '**/R.class',
                        '**/R$*.class',
                        '**/*$ViewInjector*.*',
                        '**/*$ViewBinder*.*',
                        '**/BuildConfig.*',
                        '**/Manifest*.*'
                    ]
                ))
                def coverageSourceDirs = [
                    "src/main/kotlin",
                    "src/$productFlavorName/kotlin",
                    "src/$buildTypeName/kotlin"
                ]
                additionalSourceDirs.from(files(coverageSourceDirs))
                sourceDirectories.from(files(coverageSourceDirs))
                executionData.from(files("${project.buildDir}/jacoco/${testTaskName}.exec"))
                reports {
                    xml.required = true
                    html.required = true
                }
            }
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    testImplementation 'junit:junit:4.13'
}
